package com.student.db;

import org.mindrot.jbcrypt.BCrypt;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

public class DBInitializer {

    public static void initialize() {
        try (Connection conn = DBConnection.getConnection();
             Statement stmt = conn.createStatement()) {

            // Таблица пользователей
            if (!tableExists(stmt, "USERS")) {
                stmt.execute("""
                    CREATE TABLE USERS (
                        ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                        USERNAME VARCHAR(50) UNIQUE,
                        PASSWORDHASH VARCHAR(100),
                        ROLE VARCHAR(20),
                        ACTIVATED BOOLEAN
                    )
                """);
            }

            // Таблица дверей
            if (!tableExists(stmt, "DOORS")) {
                stmt.execute("""
                    CREATE TABLE DOORS (
                        ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                        NAME VARCHAR(50),
                        LOCATION VARCHAR(100),
                        STATUS VARCHAR(20) DEFAULT 'Закрыта'
                    )
                """);
            }

            // Таблица логов доступа
            if (!tableExists(stmt, "ACCESSLOGS")) {
                stmt.execute("""
                    CREATE TABLE ACCESSLOGS (
                        ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                        USER_ID INT NOT NULL,
                        DOOR_ID INT NOT NULL,
                        LOG_TIME TIMESTAMP NOT NULL,
                        RESULT VARCHAR(50) NOT NULL,
                        FOREIGN KEY (USER_ID) REFERENCES USERS(ID),
                        FOREIGN KEY (DOOR_ID) REFERENCES DOORS(ID)
                    )
                """);
            }

            // Таблица прав доступа
            if (!tableExists(stmt, "PERMISSIONS")) {
                stmt.execute("""
                    CREATE TABLE PERMISSIONS (
                        ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                        DOOR_ID INT NOT NULL,
                        ROLE VARCHAR(20) NOT NULL,
                        CANOPEN BOOLEAN DEFAULT FALSE,
                        CANCLOSE BOOLEAN DEFAULT FALSE,
                        FOREIGN KEY (DOOR_ID) REFERENCES DOORS(ID)
                    )
                """);
            }

            // Таблица карт доступа
            if (!tableExists(stmt, "ACCESSCARDS")) {
                stmt.execute("""
                    CREATE TABLE ACCESSCARDS (
                        ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                        CARDNUMBER VARCHAR(50) UNIQUE,
                        USER_ID INT NOT NULL,
                        VALIDITY TIMESTAMP,
                        FOREIGN KEY (USER_ID) REFERENCES USERS(ID)
                    )
                """);
            }

            // Вставка стандартных пользователей
            seedUsers(stmt);

            // Вставка записи в таблицу DOORS
            seedDoors(stmt);

            System.out.println("Database initialized successfully in Firebird.");
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }

    private static boolean tableExists(Statement stmt, String tableName) throws SQLException {
        String check = "SELECT COUNT(*) FROM RDB$RELATIONS WHERE RDB$RELATION_NAME = '" + tableName.toUpperCase() + "'";
        try (ResultSet rs = stmt.executeQuery(check)) {
            rs.next();
            return rs.getInt(1) > 0;
        }
    }

    private static void seedUsers(Statement stmt) throws SQLException {
        String[] users = {
            "admin:ADMIN:admin",
            "guard:SECURITY:guard",
            "employee:EMPLOYEE:employee"
        };

        for (String user : users) {
            String[] parts = user.split(":");
            String username = parts[0];
            String role = parts[1];
            String password = parts[2];

            String checkUser = "SELECT ID FROM USERS WHERE USERNAME = '" + username + "'";
            try (ResultSet rs = stmt.executeQuery(checkUser)) {
                if (!rs.next()) {
                    String hashedPassword = BCrypt.hashpw(password, BCrypt.gensalt());
                    String insertUser = String.format("""
                        INSERT INTO USERS (USERNAME, PASSWORDHASH, ROLE, ACTIVATED)
                        VALUES ('%s', '%s', '%s', TRUE)
                    """, username, hashedPassword, role);
                    stmt.executeUpdate(insertUser);
                }
            }
        }
    }

    private static void seedDoors(Statement stmt) throws SQLException {
        String checkDoor = "SELECT ID FROM DOORS WHERE ID = 0";
        try (ResultSet rs = stmt.executeQuery(checkDoor)) {
            if (!rs.next()) {
                String insertDoor = """
                    INSERT INTO DOORS (ID, NAME, LOCATION, STATUS)
                    VALUES (0, 'Авторизация', '-', '-')
                """;
                stmt.executeUpdate(insertDoor);
            }
        }
    }
}